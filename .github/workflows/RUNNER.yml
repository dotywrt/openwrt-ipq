name: RUNNER V24.10-K6.12-X-NSS

on:
  workflow_dispatch:
    inputs:
      project_prefix:
        description: 'Project prefix (e.g., DOTYWRT)'
        required: false
        default: 'DOTYWRT'

      version:
        description: 'Firmware version (e.g., 1.2)'
        required: false
        default: '1.0'

      build_name:
        description: 'Build name (e.g., R1, CUSTOM)'
        required: false
        default: 'K612-R1'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set timezone to Malaysia
        run: |
          sudo ln -sf /usr/share/zoneinfo/Asia/Kuala_Lumpur /etc/localtime
          echo "Asia/Kuala_Lumpur" | sudo tee /etc/timezone
          date

      - name: Show feeds.conf.default
        run: cat ./feeds.conf.default

      - name: Show disk space before cleanup
        run: df -h

      - name: Cleanup system
        run: |
          echo "Cleaning up..."
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/* /usr/local/lib/android /usr/share/dotnet \
                      /opt/microsoft/powershell /opt/hostedtoolcache/CodeQL \
                      /var/lib/snapd/cache/* /home/linuxbrew/.linuxbrew \
                      /usr/local/share/boost /usr/local/lib/node_modules \
                      /usr/share/swift /usr/share/kotlin /usr/share/rust \
                      /opt/az /var/cache/apt /var/lib/gems /var/lib/docker/tmp/* \
                      /usr/local/lib/python*/{dist,site}-packages \
                      /opt/hostedtoolcache/Java_*/jdk
          docker image prune -a -f

      - name: Show disk space after cleanup
        run: df -h

      - name: System info
        run: |
          uname -a
          gcc --version
          nproc
          grep "model name" /proc/cpuinfo | head -1
          free -h

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget p7zip-full

      - name: Set environment variables
        run: |
          echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV
          echo "NOW=$(date '+%d-%b-%Y' | tr 'a-z' 'A-Z')" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

          BASE_BUILD_NAME="${{ github.event.inputs.build_name }}"
          DATE_SUFFIX=$(date '+%Y%m%d')
          BUILD_NAME="${BASE_BUILD_NAME}-${DATE_SUFFIX}"
          echo "BUILD_NAME=${BUILD_NAME}" >> $GITHUB_ENV
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          FWMODEL="{BASE_BUILD_NAME}-{VERSION}"
          echo "PROJECT_PREFIX=${{ github.event.inputs.project_prefix }}" >> $GITHUB_ENV
          echo "FW_BASENAME=${{ github.event.inputs.project_prefix }}-V${{ github.event.inputs.version }}-${BUILD_NAME}" >> $GITHUB_ENV
          echo "FW_CC=${{ github.event.inputs.project_prefix }} V${{ github.event.inputs.version }}-${BUILD_NAME}" >> $GITHUB_ENV

      - name: Clone PNP Settings
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git clone https://$GH_PAT@github.com/dotywrt/DEFAULT.git files
          rm -rf files/.git
          chmod 755 files/etc/uci-defaults/99-setup

      - name: Setup Build Version
        run: |
          TODAY=$(date '+%d-%b-%Y')
          sed -i "s/DDDD/${TODAY}/g" files/www/luci-static/resources/view/status/include/10_system.js
          sed -i "s/XXXX/${FWMODEL}/g" files/www/luci-static/resources/view/status/include/10_system.js
          sed -i "s/XXXX/$(echo "${FWMODEL}" | tr '[:upper:]' '[:lower:]')/g" files/etc/opkg/customfeeds.conf
        env:
          FW_BASENAME: ${{ env.FW_BASENAME }}

      - name: Update & install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Prepare config (NFT only)
        run: |
          cp ./AW1000.seed .config
          make defconfig

      - name: Disable opkg GPG signature check
        run: |
          sed -i '/check_signature/ s/.*/option check_signature 0/' package/system/opkg/files/opkg.conf
          grep -q 'option check_signature 0' package/system/opkg/files/opkg.conf || echo 'option check_signature 0' >> package/system/opkg/files/opkg.conf

      - name: Download package sources
        run: make download

      - name: Build tools
        run: make tools/install -j$(nproc) || make tools/install

      - name: Build toolchain
        run: make toolchain/install -j$(nproc) || make toolchain/install

      - name: Build firmware
        run: make -j$(nproc)

      - name: Copy bin & metadata
        run: |
          mkdir -p backup
          cp -r bin backup/bin
          cp key-build.pub key-build key-build.ucert key-build.ucert.revoke \
            feeds.conf.default .config backup/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FW_BASENAME }}
          path: |
            backup/
